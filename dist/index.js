!function(r,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports["state-update-builder"]=n():r["state-update-builder"]=n()}(this,function(){return function(r){function n(e){if(c[e])return c[e].exports;var g=c[e]={i:e,l:!1,exports:{}};return r[e].call(g.exports,g,g.exports,n),g.l=!0,g.exports}var c={};return n.m=r,n.c=c,n.i=function(r){return r},n.d=function(r,c,e){n.o(r,c)||Object.defineProperty(r,c,{configurable:!1,enumerable:!0,get:e})},n.n=function(r){var c=r&&r.__esModule?function(){return r.default}:function(){return r};return n.d(c,"a",c),c},n.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\nconst defaultOptions = {\r\n    enableWarnings: false,\r\n    errorsLog: true\r\n};\r\n\r\n\r\n//TODO: ad warnings\r\nclass StateUpdateBuilder {\r\n    constructor(state, options) {\r\n        if (state == undefined)\r\n            console.error('root cannot be null');\r\n\r\n        this._options = Object.assign({}, defaultOptions, options);\r\n\r\n        this.current = this.extendNode(state);\r\n        this.origin = state;\r\n        this.parent = undefined;\r\n        this.parent = undefined;\r\n        this._updated = false;\r\n        this._lastNode = undefined;\r\n        this._refLabel = undefined;\r\n    }\r\n\r\n    //generate a StateUpdateBuilder as passing current root as an\r\n    initChildBuider(newOrigin, lastNode, label) {\r\n        var childBuilder = new StateUpdateBuilder(newOrigin, this._options);\r\n\r\n        //propagate parent builder informations\r\n        childBuilder.parent = this;\r\n        childBuilder._lastNode = lastNode;\r\n        childBuilder._refLabel = label;\r\n\r\n        return childBuilder;\r\n    }\r\n\r\n    //creates new reference for arrays, objects and functions\r\n    extendNode(node) {\r\n        if (Array.isArray(node))\r\n            return [].concat(node);\r\n\r\n        if (typeof node === 'object')\r\n            return Object.assign({}, node);\r\n\r\n        if (typeof node === 'function')\r\n            return ()=> node();\r\n\r\n        return node\r\n    }\r\n\r\n    //traverse single node object\r\n    traverseNode(label) {\r\n        if (this._treeError) return this;\r\n\r\n        var node = this.current[label];\r\n        if (checkNodeUndefined.call(this, node, label))\r\n            return this;\r\n\r\n        //create new builder with shallow copy of traversed node\r\n        var resultBuilder = this.initChildBuider(node, this.current, label);\r\n\r\n        //assign node copy to parent pointer\r\n        this.current[label] = resultBuilder.current;\r\n\r\n        //returns new builder\r\n        return resultBuilder;\r\n    }\r\n\r\n    //traverse single array object navigate to array instance\r\n    traverseList(label, lambda) {\r\n        if (this._treeError) return this;\r\n\r\n        var node = this.current[label];\r\n\r\n        if (checkNodeUndefined.call(this, node, label) || checkNodeNotArray.call(this, node, label)) {\r\n            this.propagateError(true);\r\n            return this;\r\n        }\r\n\r\n        var choosePath = (el, i)=> typeof lambda === 'function' ? lambda(el, i) : true;\r\n        var elemIndex = node.findIndex(choosePath);\r\n\r\n        if (checkListItemUndefined.call(this, elemIndex, label)) return this;\r\n\r\n        var lastNode = this.extendNode(node);\r\n        //create new builder positioned on item found\r\n        var resultBuilder = this.initChildBuider(node.find(choosePath), lastNode, elemIndex);\r\n\r\n        //generate new reference to current node array\r\n        this.current[label] = lastNode;\r\n        this.current[label][elemIndex] = resultBuilder.current;\r\n\r\n        return resultBuilder;\r\n    }\r\n\r\n    //UPDATE OPERATIONS\r\n    //{$set: any} replace the target entirely.\r\n    set(label, value) {\r\n        if (this._treeError) return this;\r\n\r\n        if (_DEV_ && this._options.enableWarnings && this.current[label] === undefined && label !== null)\r\n            console.error('SUB - Warning: node \"' + label + '\" not found');\r\n\r\n        this.propagateUpdate(this._updated || this.current[label] !== value);\r\n        this.current[label] = value;\r\n\r\n\r\n        return this;\r\n    }\r\n\r\n    setNode(node) {\r\n        if (this._treeError) return this;\r\n\r\n        if (!this._lastNode) {\r\n            this.current = node;\r\n            this.propagateUpdate(this._updated || this.current !== node);\r\n        }\r\n        else {\r\n            this._lastNode[this._refLabel] = node;\r\n            this.propagateUpdate(this._updated || this._lastNode[this._refLabel] !== node);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    //{$merge: object} merge the keys of object with the target.\r\n    merge(label, value) {\r\n        if (this._treeError) return this;\r\n\r\n        if (this._options.enableWarnings && typeof value !== 'object') {\r\n            console.error('SUB - Warning: \"value\" is not an object');\r\n            return this;\r\n        }\r\n\r\n        var node = this.current[label];\r\n\r\n        this.propagateUpdate(this._updated || Object.keys(value).reduce((p, c) => p || node[c] !== value[c], false));\r\n\r\n        this.current[label] = Object.assign(node, value);\r\n\r\n\r\n        return this;\r\n    }\r\n\r\n    mergeNode(node) {\r\n        if (this._treeError) return this;\r\n\r\n        var elem = this._lastNode ? this._lastNode[this._refLabel] : this.current;\r\n        this.propagateUpdate(this._updated || Object.keys(node).reduce((p, c) => p || elem[c] !== node[c], false));\r\n\r\n        if (!this._lastNode) {\r\n            this.current = Object.assign(this.current, node);\r\n        }\r\n        else\r\n            this._lastNode[this._refLabel] = Object.assign(this._lastNode[this._refLabel], node);\r\n\r\n        return this;\r\n    }\r\n\r\n    //remove child node of current object/array node\r\n    removeNode(label, lambda) {\r\n        var node = this.current[label];\r\n\r\n        if (node == undefined) return this;\r\n\r\n        if (Array.isArray(node)) {\r\n            var elemIndex = node.findIndex(lambda);\r\n            this.current[label].splice(elemIndex, 1);\r\n            return this;\r\n        }\r\n\r\n        this.current[label] = undefined;\r\n        this.propagateUpdate(true);\r\n\r\n        return this;\r\n    }\r\n\r\n    //{$apply: function} passes in the current value to the function and updates it with the new returned value.\r\n    apply(label, fn) {\r\n        if (this._treeError) return this;\r\n\r\n        var node = this.current[label];\r\n        if (checkNodeUndefined.call(this, node, label) || checkNotFunction.call(this, fn))\r\n            return this;\r\n\r\n        this.current[label] = fn(this.extendNode(node));\r\n\r\n        this.propagateUpdate(this._updated || node !== this.current[label]);\r\n\r\n        return this;\r\n    }\r\n\r\n    //{$push: array} push() all the items in array on the target.\r\n    push(label, array) {\r\n        if (this._treeError) return this;\r\n        var node = this.current[label];\r\n        if (checkNodeUndefined.call(this, node, label) || checkNodeNotArray.call(this, array, label))\r\n            return this;\r\n\r\n        var newNode = this.current[label] = this.extendNode(node);\r\n        Array.prototype.push.apply(newNode, array);\r\n        this.propagateUpdate(true);\r\n\r\n        return this; //returns the same builder\r\n\r\n\r\n    }\r\n\r\n    //{$unshift: array} unshift() all the items in array on the target.\r\n    unshift(label, array) {\r\n        if (this._treeError) return this;\r\n        var node = this.current[label];\r\n        if (checkNodeUndefined.call(this, node, label) || checkNodeNotArray.call(this, array, label))\r\n            return this;\r\n\r\n        var newNode = this.current[label] = this.extendNode(node);\r\n        Array.prototype.unshift.apply(newNode, array);\r\n        this.propagateUpdate(this._updated || array.length > 0);\r\n\r\n        return this; //returns the same builder\r\n    }\r\n\r\n    //{$splice: array of arrays} for each item in arrays call splice() on the target with the parameters provided by the item.\r\n    splice(label, array) {\r\n        if (this._treeError) return this;\r\n        var node = this.current[label];\r\n        if (checkNodeUndefined.call(this, node, label) || checkNodeNotArray.call(this, array, label))\r\n            return this;\r\n\r\n        var newNode = this.current[label] = this.extendNode(node);\r\n        Array.prototype.splice.apply(newNode, array);\r\n\r\n        this.propagateUpdate(this._updated || array.length > 0);\r\n\r\n        return this; //returns the same builder\r\n    }\r\n\r\n    execute() {\r\n        return this.parent\r\n            ? this.parent.execute()\r\n            : this._treeError ? this.origin : this.current;\r\n    }\r\n\r\n    checkError() {\r\n        return this._treeError;\r\n    }\r\n\r\n    propagateUpdate(update) {\r\n        this._updated = update;\r\n        if(update)\r\n            this.parent && this.parent.propagateUpdate(update);\r\n    };\r\n\r\n    propagateError(error) {\r\n        this._treeError = error;\r\n        this.parent && this.parent.propagateError(error);\r\n    };\r\n\r\n    resetError() {\r\n        this.propagateError(false);\r\n        return this;\r\n    }\r\n\r\n    checkNodeUpdated() {\r\n        return this._updated;\r\n    }\r\n\r\n    pruneSubtree(label) {\r\n        if (this._treeError) return this;\r\n\r\n        var node = this.current[label];\r\n        if (_DEV_ && this._options.enableWarnings && node === undefined && label !== null)\r\n            console.error('SUB - Warning: node \"' + label + '\" not found');\r\n\r\n        if (node != undefined)\r\n            this.current[label] = this.origin[label];\r\n        else {\r\n            if (this._lastNode == undefined) {\r\n                if (this._options.errorsLog)\r\n                    console.error('SUB - Error: cannot prune node root');\r\n            }\r\n            else\r\n                this._lastNode[this._refLabel] = this.origin;\r\n        }\r\n        return this.parent || this;\r\n    }\r\n}\n/* harmony export (immutable) */ __webpack_exports__[\"default\"] = StateUpdateBuilder;\n\r\n\r\n///ERROR CHECK AND NOTIFICATION\r\nfunction checkNodeUndefined(node, label) {\r\n    if (node != undefined) return false;\r\n\r\n    this.propagateError(true);\r\n    if (this._options.errorsLog)\r\n        console.error('SUB - Error: node \"' + label + '\" not found');\r\n    return true;\r\n}\r\nfunction checkListItemUndefined(elemIndex, label) {\r\n    if (elemIndex !== -1) return false;\r\n\r\n    this.propagateError(true);\r\n    if (this._options.errorsLog)\r\n        console.error('SUB - Error: elem of list \"' + label + '\" not found');\r\n    return true;\r\n}\r\n\r\nfunction checkNodeNotArray(node, label) {\r\n    if (Array.isArray(node)) return false;\r\n\r\n    this.propagateError(true);\r\n    if (this._options.errorsLog)\r\n        console.error('SUB - Error: node \"' + label + '\" is not an array');\r\n    return true;\r\n}\r\n\r\nfunction checkNotFunction(fn) {\r\n    if (typeof fn === 'function') return false;\r\n\r\n    this.propagateError(true);\r\n    if (this._options.errorsLog)\r\n        console.error('SUB - Error: parameter \"fn\" is not a function');\r\n    return true;\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")}])});